#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN

#include <vector>
#include "doctest.h"
#include "expr_lexer.h"
#include "expr_tokens.h"
using TokenInfo = std::pair<int, double>;
extern YYSTYPE yylval;
ExprLexer yylex; // The lexer used by the parser
int yyparse(); // Generated by bison

 void exprInit();
int getExprCount();
double getExprValue(int index);

std::vector<TokenInfo> test1 = {
    {NUMBER, 45.0},
    {'+', 0},
    {NUMBER, 10.0},
};

std::vector<TokenInfo> test2 = {
    {'(', 0.0},
    {NUMBER, 0.535},
    {'-', 0.0},
    {NUMBER, 0.035},
    {')', 0.0},
    {'*', 0.0},
    {NUMBER, 10.0},
};

std::vector<TokenInfo> test3 = {
    {'(', 0.0},
    {NUMBER, 0.535},
    {'-', 0.0},
    {NUMBER, 0.035},
    {')', 0.0},
    {'*', 0.0},
    {NUMBER, 100.0},
    {';', 0.0},
    {'(', 0.0},
    {NUMBER, 0.4},
    {'+', 0.0},
    {NUMBER, 0.6},
    {')', 0.0},
    {'/', 0.0},
    {NUMBER, 4},
};

TEST_CASE("Add expression") {
    yylex.setTokenList(test1);

    exprInit();
    yyparse();
    CHECK(getExprCount() == 1);
    CHECK(getExprValue(0) == 55);
}

TEST_CASE("Sub/Mult expression") {
    yylex.setTokenList(test2);

    exprInit();
    yyparse();
    CHECK(getExprCount() == 1);
    CHECK(getExprValue(0) == 5.0);
}

TEST_CASE("Multiple expressions") {
    yylex.setTokenList(test3);

    exprInit();
    yyparse();
    CHECK(getExprCount() == 2);
    CHECK(getExprValue(0) == 50.0);
    CHECK(getExprValue(1) == 0.25);
}

